package app.feedback_panel;

import data_access.files.FileFeedbackRepository;
import data_access.in_memory_repo.InMemoryDailyLogRepository;
import entity.Angela.DailyLog;
import interface_adapter.gpt.OpenAIAPIAdapter;
import use_case.generate_feedback.GenerateFeedbackInputData;
import use_case.generate_feedback.GenerateFeedbackInteractor;
import use_case.generate_feedback.GenerateFeedbackOutputBoundary;
import entity.Ina.FeedbackEntry;

import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

public class CreateGeneratedFeedback {
    /**
     * Generates a FeedbackEntry based on fake logs.
     * @return FeedbackEntry generated by the interactor.
     */
    public static FeedbackEntry generateFeedbackEntry(LocalDate date) {
        // 1. Fake logs for the week
        InMemoryDailyLogRepository dailyRepo = new InMemoryDailyLogRepository();
        List<DailyLog> logs = DailyLogGenerator.generateFakeLogs(date);
        for (DailyLog log : logs) {
            dailyRepo.save(log);
        }

        // 2. Feedback repo
        FileFeedbackRepository feedbackRepo = new FileFeedbackRepository();

        // 3. GPT service
        OpenAIAPIAdapter adapter = new OpenAIAPIAdapter();

        // 4. OutputBoundary: capture FeedbackEntry
        AtomicReference<FeedbackEntry> capturedEntry = new AtomicReference<>();
        GenerateFeedbackOutputBoundary output = data -> {
            capturedEntry.set(data.getFeedbackEntry());
        };

        // 5. Create and run interactor
        GenerateFeedbackInteractor interactor = new GenerateFeedbackInteractor(
                dailyRepo, feedbackRepo, adapter, output
        );
        interactor.execute(new GenerateFeedbackInputData());

        // 6. Return the captured FeedbackEntry (may want to handle null if async)
        return capturedEntry.get();
    }
}
